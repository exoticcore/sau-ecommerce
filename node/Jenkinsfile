// node pipeline
def notifyLINE(status) {
    def token = credentials('LINE_NOTIFY_TOKEN')
    def jobName = env.JOB_NAME + ' ' + env.BRANCH_NAME
    def buildNo = env.BUILD_NUMBER

    def url = 'https://notify-api.line.me/api/notify'
    def message = "${jobName} Build #${buildNo} ${status} \r\n"
    sh "curl ${url} -H 'Authorization: Bearer ${token}' -F 'message=${message}'"
}

pipeline {
    agent any

    // environment {
    //     LINE_NOTIFY_TOKEN = credentials('LINE_NOTIFY_TOKEN')
    // }

    tools {nodejs "Node18"}

    stages {

        stage('BUILD') {
            steps {
                dir('node') {
                    sh 'npm install'
                }
            }   
            post {
                success {
                    echo "$LINE_NOTIFY_TOKEN"
                    notifyLINE("succeed")
                    // sh "curl -X POST -H 'Authorization: Bearer ${LINE_NOTIFY_TOKEN}' -F 'message=jenkins test' https://notify-api.line.me/api/notify"
                    echo 'Build Successful...'
                }
            }
        }

        stage('UNIT TEST') {
            steps {
                dir('node') {
                    echo 'skiping unit testing...'
                }
            } 
            post {
                success {
                    echo "Unit testing Suscces..."
                }
            }
        }

        
        stage('INTEGRATION TEST') {
            steps {
                echo 'wait for integration state build, skipping...'
            }
        }

        stage('CODE ANALYSIS with SONARQUBE') {
            environment {
                scannerHome = tool 'mysonarscanner4'
            }

            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh '''${scannerHome}/bin/sonar-scanner \
                   -Dsonar.projectKey=nodejs \
                   -Dsonar.projectName=node-app \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=./node/ \
                   -Dsonar.language=ts \
                   -Dsonar.sourceEncoding=UTF-8'''          
                }

                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

    }
}
