// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id               Int               @id @default(autoincrement())
  email                 String            @unique
  password              String
  callingCode           Int?
  phone                 Int?
  role                  Role              @default(USER)
  image                 String?
  verificationToken     String?
  isVerified            Boolean           @default(false)
  passwordToken         String?
  passwordTokenExpDate  DateTime?
  saltAuth              String
  createAt              DateTime          @default(now())
  updateAt              DateTime?         @updatedAt
  token                 Token?
  product               Product[]
  addrs                 Address[]
  carts                 Cart[]
}

model Token {
  token_id              Int               @id @default(autoincrement())
  refreshToken          String
  ip                    String
  userAgent             String?
  isValid               Boolean           @default(true)
  createAt              DateTime          @default(now())
  updateAt              DateTime          @updatedAt
  userId                Int               @unique
  user                  User              @relation(fields: [userId], references: [user_id])
}

model Address {
  addr_id               Int               @id @default(autoincrement())
  title                 String?
  addr1                 String            @db.Text
  addr2                 String?           @db.Text
  city                  String
  county                String
  district              String
  postcode              Int
  region                String
  createAt              DateTime          @default(now())
  updateAt              DateTime          @updatedAt
  userId                Int
  user                  User              @relation(fields: [userId], references: [user_id])
}

model Category {
  cat_id                Int               @id @default(autoincrement())
  name                  String
  image                 String?
  description           String            @db.Text
  products              Product[]
  createAt              DateTime          @default(now())
  updateAt              DateTime          @updatedAt
}

model Product {
  product_id            Int               @id @default(autoincrement())
  name                  String
  description           String            @db.Text
  price                 Int
  addBy                 Int               
  user                  User              @relation(fields: [addBy], references: [user_id])
  options               Option[]
  categoryId            Int
  category              Category          @relation(fields: [categoryId], references: [cat_id])      
  images                ProductImage[]
  createAt              DateTime          @default(now())
  updateAt              DateTime          @updatedAt
}

model Option {
  option_id             Int               @id @default(autoincrement())
  name                  String
  addPrice              Int
  productId             Int
  product               Product           @relation(fields: [productId], references: [product_id])
  image                 ProductImage?
  cart                  Cart[]
}

model ProductImage {
  pimg_id               Int               @id @default(autoincrement())
  title                 String
  image                 String
  mainImg               Boolean           @default(false)
  productId             Int
  product               Product           @relation(fields: [productId], references: [product_id])
  optionId              Int?              @unique
  option                Option?           @relation(fields: [optionId], references: [option_id])
  createAt              DateTime          @default(now())
  updateAt              DateTime          @updatedAt
}

model Cart {
  cart_id               Int               @id @default(autoincrement())
  userId                Int?
  user                  User?             @relation(fields: [userId], references: [user_id])
  qty                   Int
  optionId              Int
  option                Option            @relation(fields: [optionId], references: [option_id])
  createAt              DateTime          @default(now())
  updateAt              DateTime          @updatedAt
}

model TestDB {
  test_id               Int               @id @default(autoincrement())
  name                  String
  email                 String            @unique
  createAt              DateTime          @default(now())
  updateAt              DateTime          @updatedAt
}

enum Role {
  OWNER
  ADMIN
  USER
}